package com.company;

/**
 * @author Zhangsan
 * @date 2020/8/15 10:59
 *
 * @problem
 * 给出一些不同颜色的盒子，盒子的颜色由数字表示，即不同的数字表示不同的颜色。
 * 你将经过若干轮操作去去掉盒子，直到所有的盒子都去掉为止。每一轮你可以移除具有相同颜色的连续 k 个盒子（k >= 1），这样一轮之后你将得到 k*k 个积分。
 * 当你将所有盒子都去掉之后，求你能获得的最大积分和。
 *
 * @example
 * 输入：boxes = [1,3,2,2,2,3,4,3,1]
 * 输出：23
 * 解释：
 * [1, 3, 2, 2, 2, 3, 4, 3, 1]
 * ----> [1, 3, 3, 4, 3, 1] (3*3=9 分)
 * ----> [1, 3, 3, 3, 1] (1*1=1 分)
 * ----> [1, 1] (3*3=9 分)
 * ----> [] (2*2=4 分)
 *
 * @idea
 * 动态规划
 *
 *  用f(l,r,k)表示区间f(l,r)加上去去除[l,r]区间之后值等于ar的k个数组成的最大积分
 *  例如数列{6，3，6，5，6，7，6，6，8，6}算f(1,5,3)的最大积分
 *  我们可以将第五个元素a5后面的7和8移除之后的数列为{[6,3,6,5,6],6,6,6}.
 *  我们的求法可以有一下三种：
 *      1.直接删除后面的k个元素在算前面的区间的最大积分：f{1,4,0}+4*4
 *      2.从中间截取，{[6,3,6],[5],6,6,6,6}删除一个5后，再将后面的5个6删除最后再删除前面的区间
 *      其最大积分：f{1,3,4}+f{4,4,0}
 *      3.从第一个等于ar的值开始截取{[6],[3,6,5],6,6,6,6}，其最大积分：f{1,1,4}+f{2,4,0}
 *  最终我们可以推出动态规划转移方程为：
 *  f{l,r,k} = max{f(l,r-1,0)+(k+1)^2 , max(i=l->r-1){[f(l,i,k+1)+f{i+1,r-1,0}]*ϵ(ai==ar)}}
 *  其中ϵ(ai==ar)是选择函数
 *  当x == true ϵ(x) = 1
 *  当x == false ϵ(x) = 0
 *
 *  最后我们将f(1,n,0)的值返回即为最终的答案
 */
public class Solution {
    public int removeBoxes(int[] boxes) {
        int[][][] dp = new int[100][100][100];
        return max(boxes, dp, 0, boxes.length - 1, 0);
    }

    private int max(int[] boxes, int[][][] dp, int l, int r, int k) {
        if(l > r)return 0;
        if(dp[l][r][k] != 0)return dp[l][r][k];
        while(r > 1 && boxes[r] == boxes[r - 1]){
            r--;
            k++;
        }
        dp[l][r][k] = max(boxes, dp, l, r - 1, 0) + (k + 1) * (k + 1);
        for (int i = l; i < r; i++) {
            if (boxes[i] == boxes[r]) {
                dp[l][r][k] = Math.max(dp[l][r][k], max(boxes, dp, l, i, k + 1) + max(boxes, dp, i + 1, r - 1, 0));
            }
        }
    return dp[l][r][k];
    }
}
